use std::buf::{MemoryBuffer, MemoryBufferWriter, MemoryBufferReader}
use std::precompiles

struct G1Point {
    pub x: u256
    pub y: u256
}

struct G2Point {
    pub x: Array<u256, 2>
    pub y: Array<u256, 2>
}

// return the generator of G1
pub fn G1() -> G1Point {
    return G1Point(x: 1, y: 2)
}

//return the generator of G2
pub fn G2() -> G2Point {
    return G2Point(x: [11559732032986387107991004021392285783925812861821192530917403151452391805634,
             10857046999023057135944570762232829481370756359578518086990519993285655852781],
                   y: [4082367875863433681332203403145435568316851327593401208105741076214120093531,
             8495653923123431417604973247489272438418190587263600148770280649306958101930])
}

pub fn negate(p: G1Point) -> G1Point {
    let mut q: u256 = 21888242871839275222246405745257275088696311157297823662689037894645226208583
    if (p.x == 0){
        if(p.y == 0) {
            return G1Point(x: 0, y: 0)
        }
    }
    return G1Point(x: p.x, y: q - (p.y % q))
}

pub fn add(p: G1Point, q: G1Point) -> G1Point {
    let res: (u256, u256) = precompiles::ec_add(x1: p.x, y1: p.y, x2: q.x, y2: q.y)
    return G1Point(x: res.item0, y: res.item1)
}

pub fn scalar_mul(p: G1Point, r: u256) -> G1Point {
    let res: (u256, u256) = precompiles::ec_mul(x: p.x, y: p.y, s: r)
    return G1Point(x: res.item0, y: res.item1)
}

// This function will improved after Dynamic Arrays
pub fn pairing(buf: MemoryBuffer) -> bool {
    let mut output_buf: MemoryBuffer = MemoryBuffer::new(len: 32)
    let mut reader: MemoryBufferReader = output_buf.reader()
    precompiles::Precompile::EcPairing.call(input: buf, output: output_buf)
    return reader.read_u256() == 1
}